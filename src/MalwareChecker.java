
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.methods.RequestBuilder;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;

/**
 *
 * @author Can Umay
 */
public class MalwareChecker extends API_Endpoint {

    @Override
    String post(String fileDirectory) {
        String postEndpoint = "https://www.virustotal.com/vtapi/v2/file/scan";
        File fileToUpload = new File(fileDirectory);
        CloseableHttpClient httpclient = HttpClients.createDefault();
        HttpEntity postData = MultipartEntityBuilder.create().addBinaryBody("file", fileToUpload).addTextBody("apikey", API_Endpoint.getAPI_KEY()).build();
        HttpUriRequest postRequest = RequestBuilder.post(postEndpoint).setEntity(postData).build();
        System.out.println("Executing request " + postRequest.getRequestLine());
        HttpResponse response;
        try {
            response = httpclient.execute(postRequest);
            BufferedReader br = new BufferedReader(new InputStreamReader((response.getEntity().getContent())));

            if (response.getStatusLine().getStatusCode() != 200) {
                throw new RuntimeException("Failed : HTTP error code : " + response.getStatusLine().getStatusCode());
            }

            StringBuffer result = new StringBuffer();
            String line = "";
            while ((line = br.readLine()) != null) {
                result.append(line);
            }

            return result.toString();
        } catch (IOException ex) {
            Logger.getLogger(MalwareChecker.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;

    }

    @Override
    String get(HashMap<String, String> params, boolean isFile) {
        URL url;
        try {
            if (!isFile) {
                url = new URL(API_Endpoint.getDOMAIN_URL() + "?apikey=" + API_Endpoint.getAPI_KEY() + "&resource=" + params.get("url") + "&scan=1&allinfo=true");
            } else {
                url = new URL(API_Endpoint.getFILE_URL() + "?apikey=" + API_Endpoint.getAPI_KEY() + "&resource=" + params.get("hash") + "&allinfo=false");
            }
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            // For a GET request
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setConnectTimeout(10000);
            connection.setReadTimeout(10000);
            // To store our response
            if(connection.getResponseMessage().equals("Forbidden")){
                return null;
            }
            StringBuilder content;
            // Get the input stream of the connection
            try (BufferedReader input = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
                String line;
                content = new StringBuilder();
                while ((line = input.readLine()) != null) {
                    // Append each line of the response and separate them
                    content.append(line);
                    content.append(System.lineSeparator());
                }
            } finally {
                connection.disconnect();
            }
            // Output the content to the console
            return content.toString();

        } catch (MalformedURLException ex) {
            Logger.getLogger(MalwareChecker.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MalwareChecker.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;

    }

}
